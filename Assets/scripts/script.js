var answerButtonsElement = document.getElementById('answerOptions');
var myQuestions = [
    {
        question: "Commonly used data types DO NOT include: ",
        answers: [
            {text: "strings", correct: false },
            {text: "boolean", correct: false },
            {text: "alerts", correct: true },
            {text: "numbers", correct: false}
        ]
    },
    {
        question: "The condition in an if / else statement is enclosed within _______.",
        answers: [
            {text: "quotation marks", correct: false },
            {text: "curly brackets" , correct: false },
            {text: "parentheses", correct: true },
            {text: "square brackets", correct: false}
        ]
    },
    {
        question: "Arrays in Javascript can be used to store ______.",
        answers: [
            {text: "numbers and strings", correct: false },
            {text: "other arrays", correct: false },
            {text: "booleans", correct: false },
            {text: "all of the above", correct: true}
        ]
    },
    {
        question: "String values must be enclosed within ______ when being assigned to variables.",
        answers: [
            {text: "commas", correct: false},
            {text: "curly brackets", correct: false},
            {text: "quotes", correct: true },
            {text: "parentheses", correct: false}
        ]
    },
    {
        question: "A very useful tool used during development and debugging for printing content to the debugger is: ",
        answers: [
            {text: "Javascript", correct: false},
            {text: "terminal/bash", correct: false},
            {text: "for loops", correct: false},
            {text: "console log", correct: true }
        ]
    }
];

//Creating global timer initial value.
var timer = 180;
var questionsCycled = 0;
var globalTimerInterval;

//Going to shuffle the questions so that they appear in a random order each time.
var myShuffledQuestions;
//Will need to use this to keep track of the current question.
var myCurrentQuestion; 

//Will be used to store user score. 0
var userScore = 0;

function resetQuestions(){
    $("#quizQuestion").text("");
    $("#answerMessage").text("");
    $("#answerMessageContainer").addClass("hidden");
    while (answerButtonsElement.firstChild) {
        answerButtonsElement.removeChild(answerButtonsElement.firstChild)
    }
    setQuestion();
}

function checkAnswerChoice(correct) {
    var correctData = correct;

    //CorrectData should be true or undefined, if true, we know the answer is right.
    if (correctData) {
        $("#answerMessageContainer").removeClass("hidden");
        $("#answerMessage").text("You got the right answer!")
        console.log("You chose the correct answer!");
        userScore = userScore + 4;
        console.log(userScore);
        window.localStorage.setItem("userScore", JSON.stringify(userScore));

    }

    //Undefined values are falsy which means that if the selected options is undefined,
    //we will execute this instead.
    if (!correctData) {
        $("#answerMessageContainer").removeClass("hidden");
        $("#answerMessage").text("You chose poorly!")
    } 
    nextButton.addEventListener("click", resetQuestions);
}

function userSelection(event) {
    //Creating a new variable that will be defined by the event.target data generated by the click
    var selectedAnswer = event.target
    //Creating a new variable that will hold the "dataset.correct" value of the element that we clicked on.
    //This will allow us to check which of our elements is set to be the correct answer.
    var correct = selectedAnswer.dataset.correct
    checkAnswerChoice(correct)
  }

//Declaring function to display question to the user. Will by taking an argument
//"question", this is one of our array elements. 
function showQuestion(question) {
    //Adding the array elements "question" of the array index we have picked. We
    //are then setting adding the text to the "quizQuestion" element ID.
    $("#quizQuestion").text(question.question);
    //using for loop to loop through our answer choices. 
    question.answers.forEach(answer => {
    //Creates a new element "button" for each answer in the array.
      var button = document.createElement("button");
      //Adds an innerText based on the answer 
      button.innerText = answer.text;
      //Adds "button" class to button. Adding because I have added. CSS styling
      //for this class.
      button.classList.add("button");
      //Checks to see if the answer element of the question contains correct = true, 
      //if it does, then we add the data set correct to element and set as true. This
      //will help us check if the choice the user has selected is the right choice. 
      if (answer.correct) {
        button.dataset.correct = answer.correct;
      }
      //Adds button listener, if the user clicks on one of the options, we then invoke
      //the userSelection function.
      button.addEventListener('click', userSelection);
      $("#answerOptions").append(button);

    })
  }

//We are first setting an initial game timer of 20 seconds
//We are also showing this timer to the user. 
function getNextQuestion () {
    $("#globalTimer").removeClass("hidden");
    $("#nextButton").removeClass("hidden");
    
    //Will need to reset quiz after each new question. Don't want content from previous
    //question randomly popping up.
    showQuestion(myShuffledQuestions[myCurrentQuestion]);
}

function startGameTimer() {

    globalTimerInterval = setInterval (function(){
        if (timer > 0) {
            timer--;
            $("#globalTimer").text("Timer: " + timer);

        } 
        if ( timer == 0 ) {
            console.log(timer);
            clearInterval(globalTimerInterval);
        endgame();
        }
    }, 1000)
}

function setQuestion () {
    questionsCycled
    myShuffledQuestions = myQuestions.sort(() => Math.random() - .5)
    myCurrentQuestion = questionsCycled;
    if (questionsCycled <= myShuffledQuestions.length-1 ){
        getNextQuestion();
    }
    if (questionsCycled > 4) {
        endgame();
        console.log(questionsCycled);
    }
    questionsCycled++;


}
function refreshPage () {
    location.reload();
}

function endgame() {
    clearInterval(globalTimerInterval);
    $("#quizContentBox").addClass("hidden");
    $("#playerInfo").removeClass("hidden");
    $("#formNavButtons").removeClass("hidden");
    $("#highscoresButton").removeClass("hidden");
    $("#nextButtonContainer").addClass("hidden");

    goBack.addEventListener("click", refreshPage);
    highscoreButton.addEventListener("click", function() {
        $("#playerInfo").addClass("hidden");
        $("#formNavButtons").addClass("hidden");
        $("#highscoresButton").addClass("hidden");
        $("#highscoresContainer").removeClass("hidden");
    })

}

//Once game is started we want to present the user with a countdown timer. The timer
//time will count down and we will begin the game after the countdown. 
//The first few things we are doing int his function is hiding and revealing a bunch
//relevant containers. We are also providing a countdown before the game starts.
//Once initial timer has finished we invoke the "getNextQuestion" function to display
//the questions.
function startGame() {
    $("#welcomeMessageBox").addClass("hidden");
    $("#startButton").addClass("hidden");
    $("#countDownTimerBox").removeClass("hidden");
    $("#startButtonContainer").addClass("hidden");
    var startTimer = 10;
    var startTimerInterval = setInterval (function(){
        if (startTimer > 0) {
            startTimer--;
            $("#secondsLeftStart").text(startTimer);
            console.log(startTimer);
        }

        if (startTimer == 0 ) {
            $("#quizContentBox").removeClass("hidden");
            $("#nextButton").removeClass("hidden");
            $("#countDownTimerBox").addClass("hidden");
            $("#nextButtonContainer").removeClass("hidden");
            startGameTimer();
            clearInterval(startTimerInterval);
            setQuestion();
        }

    }, 1000)

}


//Add Event Listener on Start Game click. This will allow the user to start the game.
//Invoking startGame function on startButton click.
startButton.addEventListener("click", startGame);

